//HintName: TestEnum.g.cs
// <auto-generated>
// This code was generated by EnumGenerator.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Tests;

internal static class TestEnumGen
{
	private static readonly Dictionary<Tests.TestEnum, string> _stringValues = new()
	{
		{ (Tests.TestEnum)0, "None" },
		{ (Tests.TestEnum)1, "First" },
		{ (Tests.TestEnum)2, "Second" },
		{ (Tests.TestEnum)3, "First, Second" },
		{ (Tests.TestEnum)4, "Third" },
		{ (Tests.TestEnum)5, "First, Third" },
		{ (Tests.TestEnum)6, "Second, Third" },
		{ (Tests.TestEnum)7, "First, Second, Third" },
		{ (Tests.TestEnum)8, "Fourth" },
		{ (Tests.TestEnum)9, "First, Fourth" },
		{ (Tests.TestEnum)10, "Second, Fourth" },
		{ (Tests.TestEnum)11, "First, Second, Fourth" },
		{ (Tests.TestEnum)12, "Third, Fourth" },
		{ (Tests.TestEnum)13, "First, Third, Fourth" },
		{ (Tests.TestEnum)14, "Second, Third, Fourth" },
		{ (Tests.TestEnum)15, "First, Second, Third, Fourth" },
		{ (Tests.TestEnum)16, "Fifth" },
		{ (Tests.TestEnum)17, "First, Fifth" },
		{ (Tests.TestEnum)18, "Second, Fifth" },
		{ (Tests.TestEnum)19, "First, Second, Fifth" },
		{ (Tests.TestEnum)20, "Third, Fifth" },
		{ (Tests.TestEnum)21, "First, Third, Fifth" },
		{ (Tests.TestEnum)22, "Second, Third, Fifth" },
		{ (Tests.TestEnum)23, "First, Second, Third, Fifth" },
		{ (Tests.TestEnum)24, "Fourth, Fifth" },
		{ (Tests.TestEnum)25, "First, Fourth, Fifth" },
		{ (Tests.TestEnum)26, "Second, Fourth, Fifth" },
		{ (Tests.TestEnum)27, "First, Second, Fourth, Fifth" },
		{ (Tests.TestEnum)28, "Third, Fourth, Fifth" },
		{ (Tests.TestEnum)29, "First, Third, Fourth, Fifth" },
		{ (Tests.TestEnum)30, "Second, Third, Fourth, Fifth" },
		{ (Tests.TestEnum)31, "First, Second, Third, Fourth, Fifth" },
	};
	private static readonly Dictionary<Tests.TestEnum, byte[]> _utf8Cache = new();

	public static IReadOnlyList<Tests.TestEnum> Values { get; } = Enum.GetValues<Tests.TestEnum>();

	public static ReadOnlySpan<byte> NullTerminatedMemberNames => "None\0First\0Second\0Third\0Fourth\0Fifth\0"u8;

	public static string ToStringFast(this Tests.TestEnum value)
	{
		return _stringValues.TryGetValue(value, out string? stringValue) ? stringValue : throw new ArgumentOutOfRangeException(nameof(value), value, null);
	}

	public static ReadOnlySpan<byte> AsUtf8Span(this Tests.TestEnum value)
	{
		if (!_stringValues.TryGetValue(value, out string? str))
			throw new ArgumentOutOfRangeException(nameof(value), value, null);

		if (!_utf8Cache.TryGetValue(value, out byte[]? bytes))
		{
			bytes = Encoding.UTF8.GetBytes(str);
			_utf8Cache[value] = bytes;
		}

		return new ReadOnlySpan<byte>(bytes);
	}

	public static int GetIndex(this Tests.TestEnum value)
	{
		return value switch
		{
			Tests.TestEnum.None => 0,
			Tests.TestEnum.First => 1,
			Tests.TestEnum.Second => 2,
			Tests.TestEnum.Third => 3,
			Tests.TestEnum.Fourth => 4,
			Tests.TestEnum.Fifth => 5,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static Tests.TestEnum FromIndex(int index)
	{
		return index switch
		{
			0 => Tests.TestEnum.None,
			1 => Tests.TestEnum.First,
			2 => Tests.TestEnum.Second,
			3 => Tests.TestEnum.Third,
			4 => Tests.TestEnum.Fourth,
			5 => Tests.TestEnum.Fifth,
			_ => throw new ArgumentOutOfRangeException(nameof(index), index, null),
		};
	}

	public static void Write(this BinaryWriter writer, Tests.TestEnum value)
	{
		writer.Write((int)value);
	}

	public static Tests.TestEnum ReadTestEnum(this BinaryReader reader)
	{
		return (Tests.TestEnum)reader.ReadInt32();
	}

	public static bool HasFlagFast(this Tests.TestEnum value, Tests.TestEnum flag)
	{
		return (value & flag) != 0;
	}
}

//HintName: DayOfWeek.g.cs
// <auto-generated>
// This code was generated by EnumGenerator.
// </auto-generated>

#nullable enable

using System.Collections.Generic;

namespace System;

public static class DayOfWeekGen
{
	public static IReadOnlyList<System.DayOfWeek> Values { get; } = Enum.GetValues<System.DayOfWeek>();

	public static ReadOnlySpan<byte> NullTerminatedMemberNames => "Sunday\0Monday\0Tuesday\0Wednesday\0Thursday\0Friday\0Saturday\0"u8;

	public static string ToStringFast(this System.DayOfWeek value)
	{
		return value switch
		{
			System.DayOfWeek.Sunday => "Sunday",
			System.DayOfWeek.Monday => "Monday",
			System.DayOfWeek.Tuesday => "Tuesday",
			System.DayOfWeek.Wednesday => "Wednesday",
			System.DayOfWeek.Thursday => "Thursday",
			System.DayOfWeek.Friday => "Friday",
			System.DayOfWeek.Saturday => "Saturday",
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static ReadOnlySpan<byte> AsUtf8Span(this System.DayOfWeek value)
	{
		return value switch
		{
			System.DayOfWeek.Sunday => "Sunday"u8,
			System.DayOfWeek.Monday => "Monday"u8,
			System.DayOfWeek.Tuesday => "Tuesday"u8,
			System.DayOfWeek.Wednesday => "Wednesday"u8,
			System.DayOfWeek.Thursday => "Thursday"u8,
			System.DayOfWeek.Friday => "Friday"u8,
			System.DayOfWeek.Saturday => "Saturday"u8,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static int GetIndex(this System.DayOfWeek value)
	{
		return value switch
		{
			System.DayOfWeek.Sunday => 0,
			System.DayOfWeek.Monday => 1,
			System.DayOfWeek.Tuesday => 2,
			System.DayOfWeek.Wednesday => 3,
			System.DayOfWeek.Thursday => 4,
			System.DayOfWeek.Friday => 5,
			System.DayOfWeek.Saturday => 6,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static System.DayOfWeek FromIndex(int index)
	{
		return index switch
		{
			0 => System.DayOfWeek.Sunday,
			1 => System.DayOfWeek.Monday,
			2 => System.DayOfWeek.Tuesday,
			3 => System.DayOfWeek.Wednesday,
			4 => System.DayOfWeek.Thursday,
			5 => System.DayOfWeek.Friday,
			6 => System.DayOfWeek.Saturday,
			_ => throw new ArgumentOutOfRangeException(nameof(index), index, null),
		};
	}
}

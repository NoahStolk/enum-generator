//HintName: TestEnum.g.cs
// <auto-generated>
// This code was generated by EnumGenerator.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;

namespace Tests;

internal static class TestEnumUtilities
{
	public static IReadOnlyList<Tests.TestEnum> Values { get; } = Enum.GetValues<Tests.TestEnum>();

	public static ReadOnlySpan<byte> NullTerminatedMemberNames => "None\0First\0Second\0Third\0Fourth\0Fifth\0"u8;

	public static string ToStringFast(this Tests.TestEnum value)
	{
		return value switch
		{
			Tests.TestEnum.None => "None",
			Tests.TestEnum.First => "First",
			Tests.TestEnum.Second => "Second",
			Tests.TestEnum.Third => "Third",
			Tests.TestEnum.Fourth => "Fourth",
			Tests.TestEnum.Fifth => "Fifth",
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static ReadOnlySpan<byte> AsUtf8Span(this Tests.TestEnum value)
	{
		return value switch
		{
			Tests.TestEnum.None => "None"u8,
			Tests.TestEnum.First => "First"u8,
			Tests.TestEnum.Second => "Second"u8,
			Tests.TestEnum.Third => "Third"u8,
			Tests.TestEnum.Fourth => "Fourth"u8,
			Tests.TestEnum.Fifth => "Fifth"u8,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static int GetIndex(this Tests.TestEnum value)
	{
		return value switch
		{
			Tests.TestEnum.None => 0,
			Tests.TestEnum.First => 1,
			Tests.TestEnum.Second => 2,
			Tests.TestEnum.Third => 3,
			Tests.TestEnum.Fourth => 4,
			Tests.TestEnum.Fifth => 5,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static Tests.TestEnum FromIndex(int index)
	{
		return index switch
		{
			0 => Tests.TestEnum.None,
			1 => Tests.TestEnum.First,
			2 => Tests.TestEnum.Second,
			3 => Tests.TestEnum.Third,
			4 => Tests.TestEnum.Fourth,
			5 => Tests.TestEnum.Fifth,
			_ => throw new ArgumentOutOfRangeException(nameof(index), index, null),
		};
	}

	public static void Write(this BinaryWriter writer, Tests.TestEnum value)
	{
		writer.Write((byte)value);
	}

	public static Tests.TestEnum ReadTestEnum(this BinaryReader reader)
	{
		return (Tests.TestEnum)reader.ReadByte();
	}
}

//HintName: TestEnum.g.cs
// <auto-generated>
// This code was generated by EnumGenerator.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Tests;

internal static class TestEnumGen
{
	private static readonly Tests.TestEnum _definedBits =
		Tests.TestEnum.None |
		Tests.TestEnum.First |
		Tests.TestEnum.Second |
		Tests.TestEnum.Third |
		Tests.TestEnum.Fourth |
		Tests.TestEnum.Fifth;

	private static readonly Dictionary<Tests.TestEnum, string> _stringCache = new()
	{
		{ Tests.TestEnum.None, "None" },
		{ Tests.TestEnum.First, "First" },
		{ Tests.TestEnum.Second, "Second" },
		{ Tests.TestEnum.Third, "Third" },
		{ Tests.TestEnum.Fourth, "Fourth" },
		{ Tests.TestEnum.Fifth, "Fifth" },
	};

	private static readonly Dictionary<Tests.TestEnum, byte[]> _utf8Cache = new();

	public static IReadOnlyList<Tests.TestEnum> Values { get; } = Enum.GetValues<Tests.TestEnum>();

	public static ReadOnlySpan<byte> NullTerminatedMemberNames => "None\0First\0Second\0Third\0Fourth\0Fifth\0"u8;

	public static string ToStringFast(this Tests.TestEnum value)
	{
		if (_stringCache.TryGetValue(value, out string? str))
			return str;

		str = GetFlagsString(value);
		_stringCache[value] = str;
		return str;
	}

	private static string GetFlagsString(Tests.TestEnum value)
	{
		int raw = (int)value;
		if (raw == 0)
			throw new ArgumentOutOfRangeException(nameof(value), value, null); // This means 0 is not a defined member, otherwise it would have been cached

		if ((raw & ~(int)_definedBits) != 0)
			throw new ArgumentOutOfRangeException(nameof(value), value, null);

		List<string> names = new(Values.Count);
		foreach (Tests.TestEnum item in Values)
		{
			int itemRaw = (int)item;
			if (itemRaw != 0 && (raw & itemRaw) == itemRaw)
				names.Add(_stringCache[item]); // Must be present in cache (defined flags are always pre-initialized)
		}

		return string.Join(", ", names);
	}

	public static ReadOnlySpan<byte> AsUtf8Span(this Tests.TestEnum value)
	{
		if (_utf8Cache.TryGetValue(value, out byte[]? bytes))
			return new ReadOnlySpan<byte>(bytes);

		bytes = Encoding.UTF8.GetBytes(value.ToStringFast());
		_utf8Cache[value] = bytes;
		return new ReadOnlySpan<byte>(bytes);
	}

	public static int GetIndex(this Tests.TestEnum value)
	{
		return value switch
		{
			Tests.TestEnum.None => 0,
			Tests.TestEnum.First => 1,
			Tests.TestEnum.Second => 2,
			Tests.TestEnum.Third => 3,
			Tests.TestEnum.Fourth => 4,
			Tests.TestEnum.Fifth => 5,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static Tests.TestEnum FromIndex(int index)
	{
		return index switch
		{
			0 => Tests.TestEnum.None,
			1 => Tests.TestEnum.First,
			2 => Tests.TestEnum.Second,
			3 => Tests.TestEnum.Third,
			4 => Tests.TestEnum.Fourth,
			5 => Tests.TestEnum.Fifth,
			_ => throw new ArgumentOutOfRangeException(nameof(index), index, null),
		};
	}

	public static void Write(this BinaryWriter writer, Tests.TestEnum value)
	{
		writer.Write((int)value);
	}

	public static Tests.TestEnum ReadTestEnum(this BinaryReader reader)
	{
		return (Tests.TestEnum)reader.ReadInt32();
	}

	public static bool HasFlagFast(this Tests.TestEnum value, Tests.TestEnum flag)
	{
		return (value & flag) != 0;
	}
}

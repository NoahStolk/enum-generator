//HintName: TestEnum.g.cs
// <auto-generated>
// This code was generated by EnumGenerator.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;

namespace Tests;

public static class TestEnumGen
{
	public static IReadOnlyList<Tests.TestEnum> Values { get; } = Enum.GetValues<Tests.TestEnum>();

	public static ReadOnlySpan<byte> NullTerminatedMemberNames => "Member0\0Member1\0"u8;

	public static string ToStringFast(this Tests.TestEnum value)
	{
		return value switch
		{
			Tests.TestEnum.Member0 => "Member0",
			Tests.TestEnum.Member1 => "Member1",
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static ReadOnlySpan<byte> AsUtf8Span(this Tests.TestEnum value)
	{
		return value switch
		{
			Tests.TestEnum.Member0 => "Member0"u8,
			Tests.TestEnum.Member1 => "Member1"u8,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static int GetIndex(this Tests.TestEnum value)
	{
		return value switch
		{
			Tests.TestEnum.Member0 => 0,
			Tests.TestEnum.Member1 => 1,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static Tests.TestEnum FromIndex(int index)
	{
		return index switch
		{
			0 => Tests.TestEnum.Member0,
			1 => Tests.TestEnum.Member1,
			_ => throw new ArgumentOutOfRangeException(nameof(index), index, null),
		};
	}

	public static void WriteTestEnum(this BinaryWriter writer, Tests.TestEnum value)
	{
		writer.Write((ulong)value);
	}

	public static Tests.TestEnum ReadTestEnum(this BinaryReader reader)
	{
		return (Tests.TestEnum)reader.ReadUInt64();
	}
}

//HintName: TestEnum.g.cs
// <auto-generated>
// This code was generated by EnumGenerator.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Tests;

public static class TestEnumGen
{
	private static readonly Tests.TestEnum _definedBits =
		Tests.TestEnum.None |
		Tests.TestEnum.Entry1 |
		Tests.TestEnum.Entry2 |
		Tests.TestEnum.Entry3 |
		Tests.TestEnum.Entry4 |
		Tests.TestEnum.Option1 |
		Tests.TestEnum.Option2 |
		Tests.TestEnum.Option3 |
		Tests.TestEnum.Option4;

	private static readonly Dictionary<Tests.TestEnum, string> _stringCache = new()
	{
		{ Tests.TestEnum.None, "None" },
		{ Tests.TestEnum.Entry1, "Entry1" },
		{ Tests.TestEnum.Entry2, "Entry2" },
		{ Tests.TestEnum.Entry3, "Entry3" },
		{ Tests.TestEnum.Entry4, "Entry4" },
		{ Tests.TestEnum.Option1, "Option1" },
		{ Tests.TestEnum.Option2, "Option2" },
		{ Tests.TestEnum.Option3, "Option3" },
		{ Tests.TestEnum.Option4, "Option4" },
	};

	private static readonly Dictionary<Tests.TestEnum, byte[]> _utf8Cache = new();

	public static IReadOnlyList<Tests.TestEnum> Values { get; } = Enum.GetValues<Tests.TestEnum>();

	public static ReadOnlySpan<byte> NullTerminatedMemberNames => "None\0Entry1\0Entry2\0Entry3\0Entry4\0Option1\0Option2\0Option3\0Option4\0"u8;

	public static string ToStringFast(this Tests.TestEnum value)
	{
		if (_stringCache.TryGetValue(value, out string? str))
			return str;

		str = GetFlagsString(value);
		_stringCache[value] = str;
		return str;
	}

	private static string GetFlagsString(Tests.TestEnum value)
	{
		ushort raw = (ushort)value;
		if (raw == 0)
			throw new ArgumentOutOfRangeException(nameof(value), value, null); // This means 0 is not a defined member, otherwise it would have been cached

		if ((raw & ~(ushort)_definedBits) != 0)
			throw new ArgumentOutOfRangeException(nameof(value), value, null);

		List<string> names = new(Values.Count);
		foreach (Tests.TestEnum item in Values)
		{
			ushort itemRaw = (ushort)item;
			if (itemRaw != 0 && (raw & itemRaw) == itemRaw)
				names.Add(_stringCache[item]); // Must be present in cache (defined flags are always pre-initialized)
		}

		return string.Join(", ", names);
	}

	public static ReadOnlySpan<byte> AsUtf8Span(this Tests.TestEnum value)
	{
		if (_utf8Cache.TryGetValue(value, out byte[]? bytes))
			return new ReadOnlySpan<byte>(bytes);

		bytes = Encoding.UTF8.GetBytes(value.ToStringFast());
		_utf8Cache[value] = bytes;
		return new ReadOnlySpan<byte>(bytes);
	}

	public static int GetIndex(this Tests.TestEnum value)
	{
		return value switch
		{
			Tests.TestEnum.None => 0,
			Tests.TestEnum.Entry1 => 1,
			Tests.TestEnum.Entry2 => 2,
			Tests.TestEnum.Entry3 => 3,
			Tests.TestEnum.Entry4 => 4,
			Tests.TestEnum.Option1 => 5,
			Tests.TestEnum.Option2 => 6,
			Tests.TestEnum.Option3 => 7,
			Tests.TestEnum.Option4 => 8,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static Tests.TestEnum FromIndex(int index)
	{
		return index switch
		{
			0 => Tests.TestEnum.None,
			1 => Tests.TestEnum.Entry1,
			2 => Tests.TestEnum.Entry2,
			3 => Tests.TestEnum.Entry3,
			4 => Tests.TestEnum.Entry4,
			5 => Tests.TestEnum.Option1,
			6 => Tests.TestEnum.Option2,
			7 => Tests.TestEnum.Option3,
			8 => Tests.TestEnum.Option4,
			_ => throw new ArgumentOutOfRangeException(nameof(index), index, null),
		};
	}

	public static void Write(this BinaryWriter writer, Tests.TestEnum value)
	{
		writer.Write((ushort)value);
	}

	public static Tests.TestEnum ReadTestEnum(this BinaryReader reader)
	{
		return (Tests.TestEnum)reader.ReadUInt16();
	}

	public static bool HasFlagFast(this Tests.TestEnum value, Tests.TestEnum flag)
	{
		return (value & flag) != 0;
	}
}

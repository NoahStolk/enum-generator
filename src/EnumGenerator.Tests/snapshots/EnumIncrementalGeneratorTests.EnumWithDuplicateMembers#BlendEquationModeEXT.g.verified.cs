//HintName: BlendEquationModeEXT.g.cs
// <auto-generated>
// This code was generated by EnumGenerator.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;

namespace Tests;

public static class BlendEquationModeEXTGen
{
	public static IReadOnlyList<Tests.BlendEquationModeEXT> Values { get; } = Enum.GetValues<Tests.BlendEquationModeEXT>();

	public static ReadOnlySpan<byte> NullTerminatedMemberNames => "FuncAdd\0Min\0Max\0FuncSubtract\0FuncReverseSubtract\0AlphaMinSgix\0AlphaMaxSgix\0"u8;

	public static string ToStringFast(this Tests.BlendEquationModeEXT value)
	{
		return value switch
		{
			Tests.BlendEquationModeEXT.FuncAdd => "FuncAdd",
			Tests.BlendEquationModeEXT.Min => "Min",
			Tests.BlendEquationModeEXT.Max => "Max",
			Tests.BlendEquationModeEXT.FuncSubtract => "FuncSubtract",
			Tests.BlendEquationModeEXT.FuncReverseSubtract => "FuncReverseSubtract",
			Tests.BlendEquationModeEXT.AlphaMinSgix => "AlphaMinSgix",
			Tests.BlendEquationModeEXT.AlphaMaxSgix => "AlphaMaxSgix",
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static ReadOnlySpan<byte> AsUtf8Span(this Tests.BlendEquationModeEXT value)
	{
		return value switch
		{
			Tests.BlendEquationModeEXT.FuncAdd => "FuncAdd"u8,
			Tests.BlendEquationModeEXT.Min => "Min"u8,
			Tests.BlendEquationModeEXT.Max => "Max"u8,
			Tests.BlendEquationModeEXT.FuncSubtract => "FuncSubtract"u8,
			Tests.BlendEquationModeEXT.FuncReverseSubtract => "FuncReverseSubtract"u8,
			Tests.BlendEquationModeEXT.AlphaMinSgix => "AlphaMinSgix"u8,
			Tests.BlendEquationModeEXT.AlphaMaxSgix => "AlphaMaxSgix"u8,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static int GetIndex(this Tests.BlendEquationModeEXT value)
	{
		return value switch
		{
			Tests.BlendEquationModeEXT.FuncAdd => 0,
			Tests.BlendEquationModeEXT.Min => 1,
			Tests.BlendEquationModeEXT.Max => 2,
			Tests.BlendEquationModeEXT.FuncSubtract => 3,
			Tests.BlendEquationModeEXT.FuncReverseSubtract => 4,
			Tests.BlendEquationModeEXT.AlphaMinSgix => 5,
			Tests.BlendEquationModeEXT.AlphaMaxSgix => 6,
			_ => throw new ArgumentOutOfRangeException(nameof(value), value, null),
		};
	}

	public static Tests.BlendEquationModeEXT FromIndex(int index)
	{
		return index switch
		{
			0 => Tests.BlendEquationModeEXT.FuncAdd,
			1 => Tests.BlendEquationModeEXT.Min,
			2 => Tests.BlendEquationModeEXT.Max,
			3 => Tests.BlendEquationModeEXT.FuncSubtract,
			4 => Tests.BlendEquationModeEXT.FuncReverseSubtract,
			5 => Tests.BlendEquationModeEXT.AlphaMinSgix,
			6 => Tests.BlendEquationModeEXT.AlphaMaxSgix,
			_ => throw new ArgumentOutOfRangeException(nameof(index), index, null),
		};
	}

	public static void Write(this BinaryWriter writer, Tests.BlendEquationModeEXT value)
	{
		writer.Write((int)value);
	}

	public static Tests.BlendEquationModeEXT ReadBlendEquationModeEXT(this BinaryReader reader)
	{
		return (Tests.BlendEquationModeEXT)reader.ReadInt32();
	}
}
